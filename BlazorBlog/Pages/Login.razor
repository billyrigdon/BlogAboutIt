@page "/login"
@using BlazorBlog.Models;
@using BlazorBlog.Services;
@inject HttpClient Http;
@inject IConfiguration Configuration;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject AuthService AuthService;
@using System.Text.Json;

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div class="form-group">
    <label for="email">Email</label>
    <InputText id="email" class="form-control" @bind-Value="@loginModel.Email" />
    <ValidationMessage For="@(() => loginModel.Email)" />
  </div>

  <div class="form-group">
    <label for="password">Password</label>
    <InputText id="password" class="form-control" @bind-Value="@loginModel.Password" type="password" />
    <ValidationMessage For="@(() => loginModel.Password)" />
  </div>

  <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
  private LoginModel loginModel = new LoginModel();

  private async Task HandleLogin()
  {
    try
    {
      var apiUrl = Configuration["Api:BaseUrl"];
      var response = await Http.PostAsJsonAsync($"{apiUrl}/login", loginModel);

      if (response.IsSuccessStatusCode)
      {
        var json = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(json, new JsonSerializerOptions
          {
            PropertyNameCaseInsensitive = true
          });

        await JSRuntime.InvokeAsync<string>("localStorage.setItem", "token", tokenResponse!.Token);
        await JSRuntime.InvokeAsync<string>("localStorage.setItem", "userId", tokenResponse.UserId.ToString());
        AuthService.Login();
        NavigationManager.NavigateTo("landing");
      }
      else
      {
        var error = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Login failed: {error}");
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Login failed: {ex.Message}");
    }
  }
}
